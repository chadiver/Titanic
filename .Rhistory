xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
head(airquality)
with(airquality, head(Temp))
library(datasets)
head(faithful)
with(faithful, plot(eruptions, waiting))
?faithful
dev.cur()
a <- "this"
a <- c("this", "that", "this", "fred")
b <- c("this", "fred")
a %in% b
?pt
pt(0.8, 15)
pt(0.8, 15, lower.tail = FALSE)
pt(2,15)
qt(0.99, 15)
qt(0.99, 150)
qt(0.999, 150)
pt(0.0001, 15)
qt(0.99999, 15)
qt(.95,99)
qt(.95,99)*(4/10)
qt(.95,99)*(4/10)+12
?p.test
?t.test
x <- c(8, 3, -1, 2, 5)
t.test(x, alternative = "two.sided")
qt(0.975, 8)
qt(0.975, 8)*(30/3)
1100 - qt(0.975, 8)*(30/3)
1100 + qt(0.975, 8)*(30/3)
?pbinom
pbinom(3, 4, 0.5)
pbinom(2, 4, 0.5)
5/16
pbinom(2, 4, 0.5)
pbinom(2, 4, 0.5, lower.tail = FALSE)
??ppois
?ppois
ppois(10/1787, 0.01)
10/1787
ppois(10/1787, 0.01, lower.tail = TRUE)
ppois(10/1787, 0.01, lower.tail = FALSE)
10/1787
ppois(10/1787, 0.01, lower.tail = TRUE)
sd <- sqrt((1.5^2 + 1.8^2)/2)
sd
4/sd
pt(4/sd,16)
?pt
pt(-4/sd,16)
qt(0.9,10)
qt(0.95,10)
?power.t.test
power.t.test(n = 100, delta = 0.01, sd = 0.04, alternative = "one.sided")
power.t.test(delta = 0.01, sd = 0.04, alternative = "one.sided", power = 0.9)
power.t.test(n = 100, delta = 0.01, sd = 0.04, type = "one.sample", alternative = "one.sided")
power.t.test(delta = 0.01, sd = 0.04, type = "one.sample", alternative = "one.sided", power = 0.9)
pt((44 - 42.04)/sqrt(2*288), 2*288 - 2)
(44 - 42.04)/sqrt(2*288)
pt((44 - 42.04)/(12/sqrt(2*288)), 2*288 - 2)
1 - pt((44 - 42.04)/(12/sqrt(2*288)), 2*288 - 2)
12/sqrt(2*288)
?pt
(44 - 42.04)/(12/sqrt(2*288))
2*(1 - pt((44 - 42.04)/(12/sqrt(2*288)), 2*288 - 2))
qt(.95,99)*(4/10)+12
qt(.95,99)*(4/10)+12
x <- c(8, 3, -1, 2, 5)
t.test(x, alternative = "two.sided")
1100 - qt(0.975, 8)*(30/3)
1100 + qt(0.975, 8)*(30/3)
pbinom(2, 4, 0.5, lower.tail = FALSE)
ppois(10/1787, 0.01, lower.tail = TRUE)
ppois(9, 17.87, lower.tail = FALSE)
pt(-4/(sd/sqrt(18)),16)
power.t.test(n = 100, delta = 0.01, sd = 0.04, type = "one.sample", alternative = "one.sided")
power.t.test(delta = 0.01, sd = 0.04, type = "one.sample", alternative = "one.sided", power = 0.9)
power.t.test(delta = 0.01, sd = 0.04, alternative = "one.sided", power = 0.9)
2*(1 - pt((44 - 42.04)/(12/sqrt(288)), 2*288 - 2))
2*(1 - pt((44 - 42.04)/(12/sqrt(288)), 288 - 2))
2*(1 - pt((44 - 42.04)/(12), 288 - 2))
readData <- function(path.name, file.name, column.types, missing.types) {
read.csv( paste(path.name, file.name, sep=""),
colClasses=column.types,
na.strings=missing.types )
}
getTitle <- function(data) {
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start + attr(title.dot.start, "match.length")-1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
Titanic.path <- "~/Developer/Kaggle/Titanic/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]
train.raw <- readData(Titanic.path, train.data.file,
train.column.types, missing.types)
df.train <- train.raw
test.raw <- readData(Titanic.path, test.data.file,
test.column.types, missing.types)
df.infer <- test.raw
require(Amelia)
missmap(df.train, main="Titanic Training Data - Missings Map",
col = c("yellow", "black"), legend = FALSE)
df.train$Title <- getTitle(df.train)
changeTitles <- function(data, old.titles, new.title) {
for (honorific in old.titles) {
data$New.Title[ which( data$Title == honorific)] <- new.title
}
return (data$New.Title)
}
df.train$New.Title <- df.train$Title
df.train$New.Title <- changeTitles(df.train,
c("Capt", "Col", "Don", "Dr",
"Jonkheer", "Lady", "Major",
"Rev", "Sir"),
"Noble")
df.train$New.Title <- changeTitles(df.train, c("the Countess", "Ms"),
"Mrs")
df.train$New.Title <- changeTitles(df.train, c("Mlle", "Mme"), "Miss")
df.train$New.Title <- as.factor(df.train$New.Title)
df.train$TitleClass <- paste0(df.train$New.Title, df.train$Pclass)
avg.age.by.titleclass <- tapply(df.train$Age, df.train$TitleClass, FUN=mean, na.rm=TRUE)
df.train$Impute.Age <- avg.age.by.titleclass[df.train$TitleClass]
df.train$New.Age <- df.train$Age
df.train$New.Age[which(is.na(df.train$Age))] <-
df.train$Impute.Age[which(is.na(df.train$Age))]
df.train$Fare.Temp <- df.train$Fare
df.train$Fare.Temp[which(df.train$Fare == 0)] <- NA
avg.fare.by.titleclass <- tapply(df.train$Fare.Temp, df.train$TitleClass, FUN=mean, na.rm=TRUE)
df.train$Impute.Fare <- avg.fare.by.titleclass[df.train$TitleClass]
df.train$New.Fare <- df.train$Fare
df.train$New.Fare[which(df.train$Fare == 0)] <-
df.train$Impute.Fare[which(df.train$Fare == 0)]
require(plyr)     # for the revalue function
require(stringr)  # for the str_sub function
## test a character as an EVEN single digit
isEven <- function(x) x %in% c("0","2","4","6","8")
## test a character as an ODD single digit
isOdd <- function(x) x %in% c("1","3","5","7","9")
## function to add features to training or test data frames
featureEngrg <- function(data) {
## Using Fate ILO Survived because term is shorter and just sounds good
data$Fate <- data$Survived
## Revaluing Fate factor to ease assessment of confusion matrices later
data$Fate <- revalue(data$Fate, c("1" = "Survived", "0" = "Perished"))
## Boat.dibs attempts to capture the "women and children first"
## policy in one feature.  Assuming all females plus males under 15
## got "dibs' on access to a lifeboat
data$Boat.Dibs <- "No"
data$Boat.Dibs[which(data$Sex == "female" | data$Age < 15)] <- "Yes"
data$Boat.Dibs <- as.factor(data$Boat.Dibs)
## Family consolidates siblings and spouses (SibSp) plus
## parents and children (Parch) into one feature
data$Family <- data$SibSp + data$Parch
## Fare.pp attempts to adjust group purchases by size of family
data$Fare.pp <- data$New.Fare/(data$Family + 1)
## Giving the traveling class feature a new look
data$Class <- data$Pclass
data$Class <- revalue(data$Class,
c("1"="First", "2"="Second", "3"="Third"))
## First character in Cabin number represents the Deck
data$Deck <- substring(data$Cabin, 1, 1)
data$Deck[ which( is.na(data$Deck ))] <- "UNK"
data$Deck <- as.factor(data$Deck)
## Odd-numbered cabins were reportedly on the port side of the ship
## Even-numbered cabins assigned Side="starboard"
data$Cabin.Last.Digit <- str_sub(data$Cabin, -1)
data$Side <- "UNK"
data$Side[which(isEven(data$Cabin.Last.Digit))] <- "port"
data$Side[which(isOdd(data$Cabin.Last.Digit))] <- "starboard"
data$Side <- as.factor(data$Side)
data$Cabin.Last.Digit <- NULL
return (data)
}
## not sure I love this, but OK
df.train$Embarked[which(is.na(df.train$Embarked))] <- 'S'
## add remaining features to training data frame
df.train <- featureEngrg(df.train)
train.keeps <- c("Fate", "Sex", "Boat.Dibs", "New.Age", "New.Title", "Class", "Deck", "Side", "New.Fare", "Fare.pp", "Embarked", "Family")
df.train.munged <- df.train[train.keeps]
require(caret)
set.seed(23)
training.rows <- createDataPartition(df.train.munged$Fate,
p = 0.8, list = FALSE)
train.batch <- df.train.munged[training.rows, ]
test.batch <- df.train.munged[-training.rows, ]
titanic.logit.1 <- glm(Fate ~ Sex + Class + New.Age + Family + Embarked + New.Fare, data = train.batch, family = binomial("logit"))
anova(titanic.logit.1, test="Chisq")
install.packages("pROC")
require(pROC)
cv.ctrl <- trainControl(method = "repeatedcv", repeats = 3,
summaryFunction = twoClassSummary,
classProbs = TRUE)
set.seed(35)
glm.tune.1 <- train(Fate ~ Sex + Class + New.Age + Family + Embarked,
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
summary(glm.tune.1)
glm.tune.2 <- train(Fate ~ Sex + Class + Sex * Class + New.Age + Family + Embarked,
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
summary(glm.tune.2)
glm.tune.3 <- train(Fate ~ Sex + Class + Sex * Class + New.Title + New.Age + Family + Embarked,
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
summary(glm.tune.3)
glm.tune.5 <- train(Fate ~ Class + I(Title=="Mr") + I(New.Title=="Noble") + New.Age + Family + I(Embarked=="S") + I(New.Title=="Mr"&Class=="Third"),
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
glm.tune.5 <- train(Fate ~ Class + I(New.Title=="Mr") + I(New.Title=="Noble") + New.Age + Family + I(Embarked=="S") + I(New.Title=="Mr"&Class=="Third"),
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
summary(glm.tune.5)
df.infer$Title <- getTitle(df.infer)
head(df.infer$Title)
head(df.infer$Title, n=15)
head(df.infer$Title, n=15)
head(df.infer$Title, n=25)
sum(is.na(df.infer$Age))
summary(df.infer$Age)
length(df.infer$Age)
unique(df.infer$Title)
tapply(df.infer$Age, df.infer$Title, mean, na.rm=TRUE)
df.infer$New.Title <- df.infer$Title
df.infer$New.Title <- changeTitles(df.infer, c("Col", "Dr", "Rev"), "Noble")
df.infer$New.Title <- changeTitles(df.infer, c("Mlle", "Mme"), "Miss")
df.infer$New.Title <- as.factor(df.infer$New.Title)
names(df.infer)
df.infer$TitleClass <- paste0(df.infer$New.Title, df.infer$Pclass)
mean.age.by.titleclass <- tapply(df.infer$Age, df.infer$TitleClass, mean, na.rm=TRUE)
mean.age.by.titleclass
df.infer$New.Title <- df.infer$Title
df.infer$New.Title <- changeTitles(df.infer, c("Dona", "Ms"), "Mrs")
df.infer$New.Title <- changeTitles(df.infer, c("Col", "Dr", "Rev"), "Noble")
df.infer$New.Title <- changeTitles(df.infer, c("Mlle", "Mme"), "Miss")
df.infer$New.Title <- as.factor(df.infer$New.Title)
df.infer$TitleClass <- paste0(df.infer$New.Title, df.infer$Pclass)
mean.age.by.titleclass <- tapply(df.infer$Age, df.infer$TitleClass, mean, na.rm=TRUE)
mean.age.by.titleclass
mean.age.by.titleclass <- tapply(df.infer$Age, df.infer$TitleClass, mean, na.rm=TRUE)
df.infer$Impute.Age <- mean.age.by.titleclass[df.infer$TitleClass]
df.infer$New.Age <- df.infer$Age
df.infer$New.Age[which(is.na(df.infer$Age))] <-
df.infer$Impute.Age[which(is.na(df.infer$Age))]
df.infer$Fare.Temp <- df.infer$Fare
df.infer$Fare.Temp[which(df.infer$Fare == 0)] <- NA
avg.fare.by.titleclass <- tapply(df.infer$Fare.Temp, df.infer$TitleClass, FUN=mean, na.rm=TRUE)
df.infer$Impute.Fare <- avg.fare.by.titleclass[df.infer$TitleClass]
df.infer$New.Fare <- df.infer$Fare
df.infer$New.Fare[which(df.infer$Fare == 0)] <-
df.infer$Impute.Fare[which(df.infer$Fare == 0)]
df.infer <- featureEngrg(df.infer)
featureEngrg <- function(data) {
## Using Fate ILO Survived because term is shorter and just sounds good
data$Fate <- data$Survived
## Revaluing Fate factor to ease assessment of confusion matrices later
data$Fate <- revalue(data$Fate, c("1" = "Survived", "0" = "Perished"))
## Boat.dibs attempts to capture the "women and children first"
## policy in one feature.  Assuming all females plus males under 15
## got "dibs' on access to a lifeboat
data$Boat.Dibs <- "No"
data$Boat.Dibs[which(data$Sex == "female" | data$Age < 15)] <- "Yes"
data$Boat.Dibs <- as.factor(data$Boat.Dibs)
## Family consolidates siblings and spouses (SibSp) plus
## parents and children (Parch) into one feature
data$Family <- data$SibSp + data$Parch
## Fare.pp attempts to adjust group purchases by size of family
data$Fare.pp <- data$New.Fare/(data$Family + 1)
## Giving the traveling class feature a new look
data$Class <- data$Pclass
data$Class <- revalue(data$Class,
c("1"="First", "2"="Second", "3"="Third"))
## First character in Cabin number represents the Deck
data$Deck <- substring(data$Cabin, 1, 1)
data$Deck[ which( is.na(data$Deck ))] <- "UNK"
data$Deck <- as.factor(data$Deck)
## Odd-numbered cabins were reportedly on the port side of the ship
## Even-numbered cabins assigned Side="starboard"
data$Cabin.Last.Digit <- str_sub(data$Cabin, -1)
data$Side <- "UNK"
data$Side[which(isEven(data$Cabin.Last.Digit))] <- "port"
data$Side[which(isOdd(data$Cabin.Last.Digit))] <- "starboard"
data$Side <- as.factor(data$Side)
data$Cabin.Last.Digit <- NULL
return (data)
}
df.infer <- featureEngrg(df.infer)
names(df.infer)
test.keeps <- train.keeps[-1]
test.keeps
featureEngrg2 <- function(data) {
## Boat.dibs attempts to capture the "women and children first"
## policy in one feature.  Assuming all females plus males under 15
## got "dibs' on access to a lifeboat
data$Boat.Dibs <- "No"
data$Boat.Dibs[which(data$Sex == "female" | data$Age < 15)] <- "Yes"
data$Boat.Dibs <- as.factor(data$Boat.Dibs)
## Family consolidates siblings and spouses (SibSp) plus
## parents and children (Parch) into one feature
data$Family <- data$SibSp + data$Parch
## Fare.pp attempts to adjust group purchases by size of family
data$Fare.pp <- data$New.Fare/(data$Family + 1)
## Giving the traveling class feature a new look
data$Class <- data$Pclass
data$Class <- revalue(data$Class,
c("1"="First", "2"="Second", "3"="Third"))
## First character in Cabin number represents the Deck
data$Deck <- substring(data$Cabin, 1, 1)
data$Deck[ which( is.na(data$Deck ))] <- "UNK"
data$Deck <- as.factor(data$Deck)
## Odd-numbered cabins were reportedly on the port side of the ship
## Even-numbered cabins assigned Side="starboard"
data$Cabin.Last.Digit <- str_sub(data$Cabin, -1)
data$Side <- "UNK"
data$Side[which(isEven(data$Cabin.Last.Digit))] <- "port"
data$Side[which(isOdd(data$Cabin.Last.Digit))] <- "starboard"
data$Side <- as.factor(data$Side)
data$Cabin.Last.Digit <- NULL
return (data)
}
df.infer <- featureEngrg2(df.infer)
test.keeps <- train.keeps[-1]
pred.these <- df.infer[test.keeps]
Survived <- predict(glm.tune.5, newdata = pred.these)
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
predictions <- as.data.frame(Survived)
predictions$PassengerID <- df.infer$PassengerID
setwd("~/Developer/Kaggle/Titanic")
write.csv(predictions[,c("PassengerID", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
predictions$PassengerID <- df.infer$PassengerID
write.csv(predictions[,c("PassengerID", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
Survived <- predict(glm.tune.5, newdata = pred.these)
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
predictions <- as.data.frame(Survived)
predictions$PassengerID <- df.infer$PassengerID
write.csv(predictions[,c("PassengerID", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
head(Survived)
head(Survived, n=20)
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
Survived <- predict(glm.tune.5, newdata = pred.these)
glm.tune.5 <- train(Fate ~ Class + I(New.Title=="Mr") + I(New.Title=="Noble") + New.Age + Family + I(Embarked=="S") + I(New.Title=="Mr"&Class=="Third"),
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
Survived <- predict(glm.tune.5, newdata = pred.these)
head(Survived)
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
predictions <- as.data.frame(Survived)
head(predictions)
predictions$PassengerID <- df.infer$PassengerID
head(predictions)
head(df.infer$PassengerID)
test.raw <- readData(Titanic.path, test.data.file,
test.column.types, missing.types)
df.infer <- test.raw
head(df.infer)
df.infer$Title <- getTitle(df.infer)
df.infer$New.Title <- df.infer$Title
df.infer$New.Title <- changeTitles(df.infer, c("Dona", "Ms"), "Mrs")
df.infer$New.Title <- changeTitles(df.infer, c("Col", "Dr", "Rev"), "Noble")
df.infer$New.Title <- changeTitles(df.infer, c("Mlle", "Mme"), "Miss")
df.infer$New.Title <- as.factor(df.infer$New.Title)
df.infer$TitleClass <- paste0(df.infer$New.Title, df.infer$Pclass)
mean.age.by.titleclass <- tapply(df.infer$Age, df.infer$TitleClass, mean, na.rm=TRUE)
df.infer$Impute.Age <- mean.age.by.titleclass[df.infer$TitleClass]
df.infer$New.Age <- df.infer$Age
df.infer$New.Age[which(is.na(df.infer$Age))] <-
df.infer$Impute.Age[which(is.na(df.infer$Age))]
df.infer$Fare.Temp <- df.infer$Fare
df.infer$Fare.Temp[which(df.infer$Fare == 0)] <- NA
avg.fare.by.titleclass <- tapply(df.infer$Fare.Temp, df.infer$TitleClass, FUN=mean, na.rm=TRUE)
df.infer$Impute.Fare <- avg.fare.by.titleclass[df.infer$TitleClass]
df.infer$New.Fare <- df.infer$Fare
df.infer$New.Fare[which(df.infer$Fare == 0)] <-
df.infer$Impute.Fare[which(df.infer$Fare == 0)]
df.infer <- featureEngrg2(df.infer)
test.keeps <- train.keeps[-1]
pred.these <- df.infer[test.keeps]
Survived <- predict(glm.tune.5, newdata = pred.these)
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
predictions <- as.data.frame(Survived)
predictions$PassengerID <- df.infer$PassengerID
head(predictions)
predictions$PassengerId <- df.infer$PassengerId
head(predictions)
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
summary(glm.tune.5)
names(df.train)
summary(glm.tune.3)
glm.tune.4 <- train(Fate ~ Sex + Class + Sex * Class + TitleClass + New.Age + Family,
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
glm.tune.4 <- train(Fate ~ Sex + Class + Sex * Class + New.Title * Class + New.Age + Family,
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
names(train.batch)
warnings()
glm.tune.4 <- train(Fate ~ Sex + Class + Sex * Class + New.Title + New.Age + Family,
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
summary(glm.tune.4)
names(train.batch)
glm.tune.5 <- train(Fate ~ Class + I(New.Title=="Mr") + I(New.Title=="Noble") + New.Age + Family + I(Embarked=="S") + I(New.Title=="Mr"&Class=="Third"),
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
summary(glm.tune.5)
rf.grid <- data.frame(.mtry = c(2, 3))
set.seed(35)
rf.tune <- train(Fate ~ Sex + Class + Age + Family + Embarked,
data = train.batch,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = cv.ctrl)
rf.grid <- data.frame(.mtry = c(2, 3))
set.seed(35)
rf.tune <- train(Fate ~ Sex + Class + New.Age + Family + Embarked,
data = train.batch,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = cv.ctrl)
rf.grid <- data.frame(.mtry = c(2, 3))
set.seed(35)
rf.tune <- train(Fate ~ Sex + Class + New.Age + Family + Embarked,
data = train.batch,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = cv.ctrl)
summary(rf.tune)
rf.tune <- train(Fate ~ Sex + Class + New.Title + New.Age + Family + Embarked,
data = train.batch,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = cv.ctrl)
SurvivedRF <- predict(rf.tune, newdata = pred.these)
head(SurvivedRF)
head(Survived)
SurvivedRF <- revalue(SurvivedRF, c("Survived" = 1, "Perished" = 0))
sum(SurvivedRF)
sum(SurvivedRF == "1")
sum(Survived == "1")
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
SurvivedRF <- revalue(SurvivedRF, c("Survived" = 1, "Perished" = 0))
predictions <- as.data.frame(Survived)
predictionsRF <- as.data.frame(SurvivedRF)
predictions$PassengerId <- df.infer$PassengerId
predictionsRF$PassengerId <- df.infer$PassengerId
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
write.csv(predictionsRF[,c("PassengerId", "Survived")],
file="Titanic_predictionsRF.csv", row.names=FALSE, quote=FALSE)
head(predictionsRF)
predictions$PassengerId <- df.infer$PassengerId
predictionsRF$PassengerId <- df.infer$PassengerId
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
write.csv(predictionsRF[,c("PassengerId", "SurvivedRF")],
file="Titanic_predictionsRF.csv", row.names=FALSE, quote=FALSE)
createCSV <- function(tuning, data, fileName) {
Survived <- predict(tuning, newdata = data)
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
predictions <- as.data.frame(Survived)
predictions$PassengerId <- df.infer$PassengerId
write.csv(predictions[,c("PassengerId", "Survived")],
file=fileName, row.names=FALSE, quote=FALSE)
}
createCSV(glm.tune.5, pred.these, "Titanic_predictions.csv")
createCSV(rf.tune, pred.these, "Titanic_predictionsRF.csv")
